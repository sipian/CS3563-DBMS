drop table person;
create table person ( 
	PersonID char(9) primary key,
	PersonName varchar NOT NULL,
	BirthYear real CHECK (BirthYear >= 0),
	DeathYear real CHECK (DeathYear >= 0)
);
COPY person FROM '/home/harsh/btech/sem-6/dbms-2/project-dataset/new-csv/title.person.csv' CSV delimiter ',' NULL '\N' ENCODING 'unicode' header;

drop table picture;
create table picture (
	PictureID char(9) primary key,
	IsMovie bool DEFAULT TRUE,
	PrimaryTitle varchar NOT NULL,
	ReleaseTitle varchar NOT NULL,
	Adult bool DEFAULT FALSE,
	StartYear real CHECK (StartYear >= 0),
	EndYear  real CHECK (EndYear >= 0),
	Duration real CHECK(Duration >= 0),
	Budget real CHECK(Budget >= 0),
	GrossBoxOffice real CHECK(GrossBoxOffice >= 0),
	ParentPicture char(9) references picture(PictureID) ,
	SeasonNumber real CHECK(SeasonNumber >= 0),
	EpisodeNumber real CHECK(EpisodeNumber >= 0)
);
COPY picture FROM '/home/harsh/btech/sem-6/dbms-2/project-dataset/new-csv/title.basics_episode_final.csv' CSV delimiter ',' NULL '\N' ENCODING 'unicode' header;

create table role ( PictureID char(9) references picture(PictureID) ON DELETE CASCADE ON UPDATE CASCADE, PersonID char(9) references person(PersonID) ON DELETE CASCADE ON UPDATE CASCADE, Role varchar(15) DEFAULT 'Miscellaneous');

COPY role FROM '/home/harsh/btech/sem-6/dbms-2/project-dataset/new-csv/title.principals_required.csv' CSV delimiter ',' NULL '\N' ENCODING 'unicode' header;

create table awards( AwardID varchar(25) NOT NULL,AwardName varchar NOT NULL, AwardOrganization varchar NOT NULL, PictureID char(9) references picture(PictureID) ON DELETE CASCADE ON UPDATE CASCADE, PersonID char(9) references person(PersonID) ON DELETE CASCADE ON UPDATE CASCADE, Winner bool DEFAULT FALSE, Year int CHECK(Year >= 0), 
primary key (AwardID, PictureID, PersonID));

COPY awards FROM '/home/harsh/btech/sem-6/dbms-2/project-dataset/new-csv/awards.basics_final.csv' CSV delimiter ',' NULL '\N' ENCODING 'unicode' header;

create table languages ( PictureID char(9) references picture(PictureID) ON DELETE CASCADE ON UPDATE CASCADE, Language varchar(75) DEFAULT 'English');

COPY languages FROM '/home/harsh/btech/sem-6/dbms-2/project-dataset/new-csv/title.languages.csv' CSV delimiter ',' NULL '\N' ENCODING 'unicode' header;

create table production_company ( PictureID char(9) references picture(PictureID) ON DELETE CASCADE ON UPDATE CASCADE, CompanyName varchar NOT NULL, CompanyID int CHECK(CompanyID >= 0));

COPY production_company FROM '/home/harsh/btech/sem-6/dbms-2/project-dataset/new-csv/title.production_comp.csv' CSV delimiter ',' NULL '\N' ENCODING 'unicode' header;

create table filming_location (PictureID char(9) references picture(PictureID) ON DELETE CASCADE ON UPDATE CASCADE,CountryName varchar(75) NOT NULL);

COPY filming_location FROM '/home/harsh/btech/sem-6/dbms-2/project-dataset/new-csv/title.filming_location.csv' CSV delimiter ',' NULL '\N' ENCODING 'unicode' header;

create table release_location ( PictureID char(9) references picture(PictureID) ON DELETE CASCADE ON UPDATE CASCADE, CountryName varchar(75) NOT NULL);

COPY release_location FROM '/home/harsh/btech/sem-6/dbms-2/project-dataset/new-csv/title.release_location.csv' CSV delimiter ',' NULL '\N' ENCODING 'unicode' header;

create table genres ( PictureID char(9) references picture(PictureID) ON DELETE CASCADE ON UPDATE CASCADE, Genre varchar );
COPY genres FROM '/home/harsh/btech/sem-6/dbms-2/project-dataset/new-csv/title.genre.csv' CSV delimiter ',' NULL '\N' ENCODING 'unicode' header;

create table rating (PictureID char(9) references picture(PictureID) ON DELETE CASCADE ON UPDATE CASCADE, averageRating real DEFAULT 0.0, numVotes int DEFAULT 0);
COPY rating FROM '/home/harsh/btech/sem-6/dbms-2/project-dataset/new-csv/title.ratings.csv' CSV delimiter ',' NULL '\N' ENCODING 'unicode' header;


df= pd.DataFrame(range(5), columns=['a'])
df.a = df.a.astype(float)


import pandas as pd
import numpy as np
imdb = pd.read_csv("./title.principals_required.csv", sep=',', na_values="\\N", low_memory=False)        
id_list = np.genfromtxt('PersonID_list.txt', dtype=str).tolist()
imdb = imdb.loc[imdb['PersonID'].isin(id_list)]

imdb.to_csv('./title.principals_required.csv',sep=',',na_rep='\\N', index=False)

